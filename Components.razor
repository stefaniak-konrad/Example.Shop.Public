@page "/oldHomePage"

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using System.Threading.Tasks;
@using MJ24app.Data
@using MJ24.ServiceLayer.DTO
@inject IJSRuntime JSRuntime
@inject MJ24.ServiceLayer.MJ24ServiceClient Client
@inject NavigationManager nav
@inject HttpContextAccessor httpContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AllProducts != null)
{
    //Wyświetl listę produktów.
    @foreach (var product in AllProducts)
    {
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <div id="container" class="container-fluid" style="margin-top:-10px; margin-bottom:-10px;">
            <div class="row">
                <div class="col-md-12 box accordion">
                    <div class="album py-1 bg-light">
                        <div class="container">
                            <div class="row featurette">
                                <div class="col-md-4">
                                    <center>
                                        <img src="@($"/images/lozka/{product.Id}.jpg")" alt="product" style="width:250px; height:250px;" />
                                    </center>
                                    @*<svg class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="250" height="250" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" focusable="false" role="img" aria-label="Placeholder: 250x250">
                                        <title>Placeholder</title>
                                        <rect width="100%" height="100%" fill="#eee"></rect>
                                        <text x="50%" y="50%" fill="#aaa" dy=".3em">250x250</text>
                                    </svg>*@
                                </div>
                                <div class="col-md-8">
                                    <h2 class="featurette-heading" style="color:red;">@product.Name</h2>
                                    <p class="lead">@product.Description</p>
                                    <table>
                                        <tr>
                                            <td align="right" valign="top"><strong>Cena:</strong></td>
                                            <td align="left" valign="top">@(product.Price*Convert.ToInt32(Quantity)) zł</td>
                                        </tr>
                                        @if (User.Identity.Name != null)
                                        {
                                            <tr>
                                                <td>
                                                    <input @bind="Quantity" class="quantityInput" />
                                                </td>
                                                <td>
                                                    <div @onclick="@(e => AddToCart(product.Id))" type="button" class="btn btn-outline-secondary" style="color: black; border-color: black;">
                                                        <font style="vertical-align: inherit;">
                                                            <font style="vertical-align: inherit;">Dodaj do koszyka </font>
                                                            <svg width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-cart-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svgborder-color:black;">
                                                                <path fill-rule="evenodd" d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l1.313 7h8.17l1.313-7H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm7 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z" />
                                                                <path fill-rule="evenodd" d="M8.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H9v1.5a.5.5 0 0 1-1 0V8H6.5a.5.5 0 0 1 0-1H8V5.5a.5.5 0 0 1 .5-.5z" />
                                                            </svg>
                                                        </font>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*<hr style="background:red" />*@
    }
}

@code {
    private System.Security.Claims.ClaimsPrincipal User;

    // kaskadowe parametry i wartości spływają w dół całego drzewa komponentów
    [CascadingParameter] CartStateProvider CartStateProvider { get; set; }

    int CartItemIndex = 0;
    string Quantity = "1";
    List<ProductDTO> AllProducts;
    ProductDTO SelectedProduct;

    [Authorize(AuthenticationSchemes = CookieAuthenticationDefaults.AuthenticationScheme)]
    protected override void OnInitialized()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.Result.User;

        //pobieranie całego asortymentu
        AllProducts = new List<ProductDTO>();
        AllProducts = Client.GetAsortyment();

        var uri = nav.ToAbsoluteUri(nav.Uri);
        var i = QueryHelpers.ParseQuery(uri.Query).TryGetValue("x", out var idUser);
        if (nav.Uri != $"{nav.BaseUri}")
        {
            // utwóż nową pozycje do koszyka
            var item = new UserModel
            {
                UserId = Convert.ToInt32(idUser)
            };
            // dodaj do koszyka
            CartStateProvider.userModel = item;
            // zapisz w pamiei lokalnej
            CartStateProvider.SaveUserId();
        }

    }


    [Authorize(AuthenticationSchemes = CookieAuthenticationDefaults.AuthenticationScheme)]
    public async Task AddToCart(int id)
    {
        try
        {
            SelectedProduct = (from x in AllProducts
                               where x.Id == Convert.ToInt32(id)
                               select x).First();
            //pobierz id użytkownika
            var userId = CartStateProvider.userModel.UserId;
            // utwóż nową pozycje do koszyka
            var item = new CartProductModel
            {
                Product = SelectedProduct,
                Quantity = Convert.ToInt32(Quantity),
                IdUzytkownika = Convert.ToInt32(userId)
            };
            // dodaj do koszyka
            CartStateProvider.ShoppingCart.Items.Add(item);
            // zapisz w pamiei lokalnej
            await CartStateProvider.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ex.ToString();
        }
    }

}
